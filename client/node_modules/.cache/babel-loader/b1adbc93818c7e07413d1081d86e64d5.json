{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\44799\\\\Documents\\\\Code\\\\cameron-mcdougall\\\\react-portfolio\\\\client\\\\src\\\\Contact.js\";\nimport React from 'react';\nimport './Contact.css';\nimport axios from 'axios';\nimport Form from './Form';\nimport FormPreview from './FormPreview';\nconst validEmailRegex = RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n\nconst validateForm = errors => {\n  let valid = true;\n  Object.values(errors).forEach( // If an error string exists, set valid to false\n  val => val.length > 0 && (valid = false));\n  return valid;\n};\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callApi = async () => {\n      const response = await fetch('/.netlify/functions/server/api/hello');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n\n      if (validateForm(this.state.errors)) {\n        const response = await fetch('/.netlify/functions/server/api/world', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: this.state.name,\n            email: this.state.email,\n            number: this.state.number,\n            message: this.state.message\n          })\n        });\n        const body = await response.json();\n        this.setState({\n          responseToPost: body.msg,\n          responseToPostStatus: body.code\n        });\n        console.log(this.state.responseToPostStatus);\n        setTimeout(() => {\n          if (this.state.responseToPostStatus === 200) {\n            this.resetForm();\n          } else {\n            return null;\n          }\n        }, 5000);\n      }\n    };\n\n    this.state = {\n      name: '',\n      email: '',\n      number: '',\n      message: '',\n      preview: true,\n      errors: {\n        name: '',\n        email: '',\n        number: '',\n        message: ''\n      },\n      response: '',\n      post: '',\n      responseToPost: '',\n      responseToPostStatus: ''\n    };\n    this.updateInputChange = this.updateInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.togglePreview = this.togglePreview.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  updateInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    let errors = this.state.errors;\n\n    switch (name) {\n      case 'name':\n        errors.name = value.length < 3 ? 'Name must be at least 3 characters long' : '';\n        break;\n\n      case 'email':\n        errors.email = validEmailRegex.test(value) ? '' : 'Not a valid email address';\n        break;\n\n      case 'number':\n        errors.number = value.length < 11 ? 'Must contain at least 11 numbers' : '';\n        break;\n\n      case 'message':\n        errors.message = value.length > 500 ? 'Too many characters, please keep your message under 500 characters' : '';\n        break;\n\n      default:\n        break;\n    }\n\n    this.setState({\n      errors,\n      [name]: value\n    });\n  } // New Code\n\n\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n  }\n\n  /*handleSubmit(event) {\n  \t\tevent.preventDefault();\n  \t\tif (validateForm(this.state.errors)) {\n  \t\tconsole.info('Valid Form');\n  \t\taxios({\n  \t\tmethod: 'POST',\n  \t\turl: 'http://localhost:3000/send',\n  \t\tdata: {\n  \t\t\tname: this.state.name,\n  \t\t\temail: this.state.email,\n  \t\t\tnumber: this.state.number,\n  \t\t\tmessage: this.state.message \n  \t\t}\n  \t}).then((response) => {\n  \t\tif (response.data.msg === 'success') {\n  \t\t\talert('Email sent, awesome!');\n  \t\t\tthis.resetForm()\n  \t\t} else if (response.data.msg === 'fail') {\n  \t\t\talert('Oops, something went wrong. Try again')\n  \t\t}\n  \t})\n  \t} else {\n  \t\t}\n  \t\n  }*/\n  resetForm() {\n    this.setState({\n      name: '',\n      email: '',\n      number: '',\n      message: '',\n      errors: {\n        name: '',\n        email: '',\n        number: '',\n        message: ''\n      }\n    });\n  }\n\n  togglePreview(event) {\n    this.state.preview === true ? this.setState({\n      preview: false\n    }) : this.setState({\n      preview: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 6\n      }\n    }, \"I'm only ever a few keystrokes and one bot check away so feel free to send me a message if you'd be interested in working with me! I've included a message preview that was originally me flexing at ReactJS states but found it's actually quite nice for proofreading before sending! Fun, eh?\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"mail-server-status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 6\n      }\n    }, this.state.response)), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"form-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      prev: this.state,\n      handleChange: this.updateInputChange.bind(this),\n      handleSubmit: this.handleSubmit.bind(this),\n      togglePreview: this.togglePreview.bind(this),\n      sendState: this.state.responseToPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(FormPreview, {\n      prev: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 6\n      }\n    })));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["C:/Users/44799/Documents/Code/cameron-mcdougall/react-portfolio/client/src/Contact.js"],"names":["React","axios","Form","FormPreview","validEmailRegex","RegExp","validateForm","errors","valid","Object","values","forEach","val","length","Contact","Component","constructor","props","callApi","response","fetch","body","json","status","Error","message","handleSubmit","e","preventDefault","state","method","headers","JSON","stringify","name","email","number","setState","responseToPost","msg","responseToPostStatus","code","console","log","setTimeout","resetForm","preview","post","updateInputChange","bind","togglePreview","event","value","target","test","componentDidMount","then","res","express","catch","err","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Contact.css';\nimport axios from 'axios';\nimport Form from './Form';\nimport FormPreview from './FormPreview';\n\nconst validEmailRegex = RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\nconst validateForm = (errors) => {\n\tlet valid = true;\n\tObject.values(errors).forEach(\n\t\t// If an error string exists, set valid to false\n\t\t(val) => val.length > 0 && (valid = false)\n\t);\n\treturn valid;\t\n}\n\nclass Contact extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\temail: '',\n\t\t\tnumber: '',\n\t\t\tmessage: '',\n\t\t\tpreview: true,\n\t\t\terrors: {\n\t\t\t\tname: '',\n\t\t\t\temail: '',\n\t\t\t\tnumber: '',\n\t\t\t\tmessage: ''\n\t\t\t},\n\t\t\tresponse: '',\n    \t\tpost: '',\n   \t\t\tresponseToPost: '',\n   \t\t\tresponseToPostStatus: ''\n\t\t};\n\n\t\tthis.updateInputChange = this.updateInputChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.togglePreview = this.togglePreview.bind(this);\n\t\tthis.resetForm = this.resetForm.bind(this);\n\n\t}\n\n\tupdateInputChange(event) {\n\n\t\tconst { name, value } = event.target;\n\t\tlet errors = this.state.errors;\n\n\t\tswitch(name) {\n\t\t\tcase 'name':\n\t\t\t\terrors.name = value.length < 3 ? 'Name must be at least 3 characters long' : '';\n\t\t\tbreak;\n\t\t\tcase 'email':\n\t\t\t\terrors.email = validEmailRegex.test(value) ? '' : 'Not a valid email address';\n\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\terrors.number = value.length < 11 ? 'Must contain at least 11 numbers' : '';\n\t\t\tbreak;\n\t\t\tcase 'message':\n\t\t\t\terrors.message = value.length > 500 ? 'Too many characters, please keep your message under 500 characters' : '';\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.setState({\n\t\t\terrors, [name]: value\n\t\t});\n\n\t}\n\n\t// New Code\n\t\n\tcomponentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  \t}\n\t\n\tcallApi = async () => {\n  \t\tconst response = await fetch('/.netlify/functions/server/api/hello');\n  \t\tconst body = await response.json();\n\n  \t\tif (response.status !== 200) throw Error(body.message);\n\n  \t\treturn body;\n\t};\n\n\thandleSubmit = async e => {\n\t\t\n\t\te.preventDefault();\n\t\t\n\t\tif (validateForm(this.state.errors)) {\n\t\t\tconst response = await fetch('/.netlify/functions/server/api/world', {\n\t\t\t\tmethod: 'POST',\n    \t\t\theaders: {\n      \t\t\t\t'Content-Type': 'application/json',\n    \t\t\t},\n    \t\t\tbody: JSON.stringify({\n    \t\t\t\tname: this.state.name,\n    \t\t\t\temail: this.state.email,\n    \t\t\t\tnumber: this.state.number,\n    \t\t\t\tmessage: this.state.message\n    \t\t\t}),\n  \t\t\t});\n  \t\t\n  \t\t\n  \t\t\tconst body = await response.json();\n  \t\t\tthis.setState({ \n\t\t\t\tresponseToPost: body.msg,\n  \t\t\t\tresponseToPostStatus: body.code, \n  \t\t\t});\n  \t\t\tconsole.log(this.state.responseToPostStatus);\n\n  \t\t\tsetTimeout(() => {\n  \t\t\t\tif (this.state.responseToPostStatus === 200) {\n  \t\t\t\t\tthis.resetForm()\n  \t\t\t\t} else { \n  \t\t\t\t\treturn null\n  \t\t\t\t}\n  \t\t\t}, 5000)\n  \t\t}\n\t}\n\n\t/*handleSubmit(event) {\n\n\t\tevent.preventDefault();\n\n\t\tif (validateForm(this.state.errors)) {\n\t\t\tconsole.info('Valid Form');\n\t\t\taxios({\n\t\t\tmethod: 'POST',\n\t\t\turl: 'http://localhost:3000/send',\n\t\t\tdata: {\n\t\t\t\tname: this.state.name,\n\t\t\t\temail: this.state.email,\n\t\t\t\tnumber: this.state.number,\n\t\t\t\tmessage: this.state.message \n\t\t\t}\n\t\t}).then((response) => {\n\t\t\tif (response.data.msg === 'success') {\n\t\t\t\talert('Email sent, awesome!');\n\t\t\t\tthis.resetForm()\n\t\t\t} else if (response.data.msg === 'fail') {\n\t\t\t\talert('Oops, something went wrong. Try again')\n\t\t\t}\n\t\t})\n\t\t} else {\n\n\t\t}\n\t\t\n\t}*/\n\n\tresetForm() {\n\t\tthis.setState({\n\t\t\tname: '',\n\t\t\temail: '',\n\t\t\tnumber: '',\n\t\t\tmessage: '',\n\t\t\terrors: {\n\t\t\t\tname: '',\n\t\t\t\temail: '',\n\t\t\t\tnumber: '',\n\t\t\t\tmessage: ''\n\t\t\t}\n\t\t})\n\t}\n\n\ttogglePreview(event) {\n\t\t(this.state.preview === true) ? \n\t\t\tthis.setState({preview: false}) : \n\t\t\tthis.setState({preview: true})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<section className='intro'>\n\t\t\t\t\t<p>I'm only ever a few keystrokes and one bot check away so feel free to send me a message if you'd be interested in working with me! I've included a message preview that was originally me flexing at ReactJS states but found it's actually quite nice for proofreading before sending! Fun, eh?</p>\n\t\t\t\t\t<p className='mail-server-status'>{this.state.response}</p>\n\t\t\t\t</section>\n\t\t\t\t\n\t\t\t\t<section className='form-wrap'>\n\t\t\t\t\t<Form\n\t\t\t\t\t\tprev={this.state}\n\t\t\t\t\t\thandleChange={this.updateInputChange.bind(this)}\n\t\t\t\t\t\thandleSubmit={this.handleSubmit.bind(this)} \n\t\t\t\t\t\ttogglePreview={this.togglePreview.bind(this)}\n\t\t\t\t\t\tsendState={this.state.responseToPost}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormPreview prev={this.state} />\n\t\t\t\t</section>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}