{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\44799\\\\Documents\\\\Code\\\\cameron-mcdougall\\\\react-portfolio\\\\client\\\\src\\\\Contact.js\";\nimport React from 'react';\nimport './Contact.css';\nimport axios from 'axios';\nimport Form from './Form';\nimport FormPreview from './FormPreview';\nconst validEmailRegex = RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\n\nconst validateForm = errors => {\n  let valid = true;\n  Object.values(errors).forEach( // If an error string exists, set valid to false\n  val => val.length > 0 && (valid = false));\n  return valid;\n};\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      number: '',\n      message: '',\n      preview: true,\n      errors: {\n        name: '',\n        email: '',\n        number: '',\n        message: ''\n      }\n    };\n    this.updateInputChange = this.updateInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.togglePreview = this.togglePreview.bind(this);\n    this.resetForm = this.resetForm.bind(this);\n  }\n\n  updateInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    let errors = this.state.errors;\n\n    switch (name) {\n      case 'name':\n        errors.name = value.length < 3 ? 'Name must be at least 3 characters long' : '';\n        break;\n\n      case 'email':\n        errors.email = validEmailRegex.test(value) ? '' : 'Not a valid email address';\n        break;\n\n      case 'number':\n        errors.number = value.length < 11 ? 'Must contain at least 11 numbers' : '';\n        break;\n\n      case 'message':\n        errors.message = value.length > 500 ? 'Too many characters, please keep your message under 500 characters' : '';\n        break;\n\n      default:\n        break;\n    }\n\n    this.setState({\n      errors,\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (validateForm(this.state.errors)) {\n      console.info('Valid Form');\n      axios({\n        method: 'POST',\n        url: '/api/sendmail',\n        data: {\n          name: this.state.name,\n          email: this.state.email,\n          number: this.state.number,\n          message: this.state.message\n        }\n      }).then(response => {\n        if (response.data.msg === 'success') {\n          alert('Email sent, awesome!');\n          this.resetForm();\n        } else if (response.data.msg === 'fail') {\n          alert('Oops, something went wrong. Try again');\n        }\n      });\n    } else {}\n  }\n\n  resetForm() {\n    this.setState({\n      name: '',\n      email: '',\n      number: '',\n      message: ''\n    });\n  }\n\n  togglePreview(event) {\n    this.state.preview === true ? this.setState({\n      preview: false\n    }) : this.setState({\n      preview: true\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      className: \"intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 6\n      }\n    }, \"I'm only ever a few keystrokes and one bot check away so feel free to send me a message if you'd be interested in working with me! I've included a message preview that was originally me flexing at ReactJS states but found it's actually quite nice for proofreading before sending! Fun, eh?\")), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"form-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      prev: this.state,\n      handleChange: this.updateInputChange.bind(this),\n      handleSubmit: this.handleSubmit.bind(this),\n      togglePreview: this.togglePreview.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(FormPreview, {\n      prev: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 6\n      }\n    })));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["C:/Users/44799/Documents/Code/cameron-mcdougall/react-portfolio/client/src/Contact.js"],"names":["React","axios","Form","FormPreview","validEmailRegex","RegExp","validateForm","errors","valid","Object","values","forEach","val","length","Contact","Component","constructor","props","state","name","email","number","message","preview","updateInputChange","bind","handleSubmit","togglePreview","resetForm","event","value","target","test","setState","preventDefault","console","info","method","url","data","then","response","msg","alert","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './Contact.css';\nimport axios from 'axios';\nimport Form from './Form';\nimport FormPreview from './FormPreview';\n\nconst validEmailRegex = RegExp(/^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/i);\nconst validateForm = (errors) => {\n\tlet valid = true;\n\tObject.values(errors).forEach(\n\t\t// If an error string exists, set valid to false\n\t\t(val) => val.length > 0 && (valid = false)\n\t);\n\treturn valid;\t\n}\n\nclass Contact extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tname: '',\n\t\t\temail: '',\n\t\t\tnumber: '',\n\t\t\tmessage: '',\n\t\t\tpreview: true,\n\t\t\terrors: {\n\t\t\t\tname: '',\n\t\t\t\temail: '',\n\t\t\t\tnumber: '',\n\t\t\t\tmessage: ''\n\t\t\t}\n\t\t};\n\n\t\tthis.updateInputChange = this.updateInputChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t\tthis.togglePreview = this.togglePreview.bind(this);\n\t\tthis.resetForm = this.resetForm.bind(this);\n\n\t}\n\n\tupdateInputChange(event) {\n\n\t\tconst { name, value } = event.target;\n\t\tlet errors = this.state.errors;\n\n\t\tswitch(name) {\n\t\t\tcase 'name':\n\t\t\t\terrors.name = value.length < 3 ? 'Name must be at least 3 characters long' : '';\n\t\t\tbreak;\n\t\t\tcase 'email':\n\t\t\t\terrors.email = validEmailRegex.test(value) ? '' : 'Not a valid email address';\n\t\t\tbreak;\n\t\t\tcase 'number':\n\t\t\t\terrors.number = value.length < 11 ? 'Must contain at least 11 numbers' : '';\n\t\t\tbreak;\n\t\t\tcase 'message':\n\t\t\t\terrors.message = value.length > 500 ? 'Too many characters, please keep your message under 500 characters' : '';\n\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.setState({\n\t\t\terrors, [name]: value\n\t\t});\n\n\t}\n\n\thandleSubmit(event) {\n\n\t\tevent.preventDefault();\n\n\t\tif (validateForm(this.state.errors)) {\n\t\t\tconsole.info('Valid Form');\n\t\t\taxios({\n\t\t\tmethod: 'POST',\n\t\t\turl: '/api/sendmail',\n\t\t\tdata: {\n\t\t\t\tname: this.state.name,\n\t\t\t\temail: this.state.email,\n\t\t\t\tnumber: this.state.number,\n\t\t\t\tmessage: this.state.message \n\t\t\t}\n\t\t}).then((response) => {\n\t\t\tif (response.data.msg === 'success') {\n\t\t\t\talert('Email sent, awesome!');\n\t\t\t\tthis.resetForm()\n\t\t\t} else if (response.data.msg === 'fail') {\n\t\t\t\talert('Oops, something went wrong. Try again')\n\t\t\t}\n\t\t})\n\t\t} else {\n\n\t\t}\n\t\t\n\t}\n\n\tresetForm() {\n\n\t\tthis.setState({\n\t\t\tname: '',\n\t\t\temail: '',\n\t\t\tnumber: '',\n\t\t\tmessage: ''\n\t\t})\n\t\t\n\t}\n\n\ttogglePreview(event) {\n\n\t\t(this.state.preview === true) ? this.setState({preview: false}) : this.setState({preview: true})\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<section className='intro'>\n\t\t\t\t\t<p>I'm only ever a few keystrokes and one bot check away so feel free to send me a message if you'd be interested in working with me! I've included a message preview that was originally me flexing at ReactJS states but found it's actually quite nice for proofreading before sending! Fun, eh?</p>\n\t\t\t\t</section>\n\t\t\t\t<section className='form-wrap'>\n\t\t\t\t\t<Form\n\t\t\t\t\t\tprev={this.state}\n\t\t\t\t\t\thandleChange={this.updateInputChange.bind(this)}\n\t\t\t\t\t\thandleSubmit={this.handleSubmit.bind(this)} \n\t\t\t\t\t\ttogglePreview={this.togglePreview.bind(this)}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormPreview prev={this.state} />\n\t\t\t\t</section>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}